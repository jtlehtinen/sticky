<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:ModernWpf.Controls" xmlns:primitives="clr-namespace:ModernWpf.Controls.Primitives">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="Button.xaml" />
    <ResourceDictionary Source="TextBox.xaml" />
    <ResourceDictionary Source="CheckBox.xaml" />
    <ResourceDictionary Source="RadioButton.xaml" />
    <ResourceDictionary Source="ToggleButton.xaml" />
    <ResourceDictionary>
      <primitives:CornerRadiusFilterConverter x:Key="TopLeftCornerRadiusDoubleValueConverter" Filter="TopLeftValue" />
      <primitives:CornerRadiusFilterConverter x:Key="BottomRightCornerRadiusDoubleValueConverter" Filter="BottomRightValue" />
    </ResourceDictionary>
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
    <Setter Property="Background" Value="{DynamicResource ToolBarButtonBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ToolBarButtonBorderThemeThickness}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="Background" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding primitives:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Rectangle x:Name="Border" RadiusX="{TemplateBinding primitives:ControlHelper.CornerRadius,
                                                          Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding primitives:ControlHelper.CornerRadius,
                                                          Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
              <local:ContentPresenterEx x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPointerOver}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPressed}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}" />
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ButtonForegroundDisabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" BasedOn="{StaticResource DefaultToggleButtonStyle}" TargetType="ToggleButton">
    <Setter Property="Background" Value="{DynamicResource ToolBarButtonBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ToolBarButtonBorderThemeThickness}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="Background" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding primitives:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Rectangle x:Name="Border" RadiusX="{TemplateBinding primitives:ControlHelper.CornerRadius,
                                                          Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding primitives:ControlHelper.CornerRadius,
                                                          Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
              <local:ContentPresenterEx x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPointerOver}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPressed}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushPressed}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelected}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelected}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}" />
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ButtonForegroundDisabled}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPointerOver}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPressed}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedDisabled}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" BasedOn="{StaticResource DefaultCheckBoxStyle}" TargetType="CheckBox">
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
    <Setter Property="primitives:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="Background" Value="{DynamicResource ToolBarButtonBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ToolBarButtonBorderThemeThickness}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <Border x:Name="Background" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding primitives:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Rectangle x:Name="Border" RadiusX="{TemplateBinding primitives:ControlHelper.CornerRadius,
                                                          Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding primitives:ControlHelper.CornerRadius,
                                                          Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
              <local:ContentPresenterEx x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPointerOver}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPressed}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushPressed}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelected}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelected}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}" />
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ButtonForegroundDisabled}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPointerOver}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPressed}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedDisabled}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" BasedOn="{StaticResource DefaultRadioButtonStyle}" TargetType="RadioButton">
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
    <Setter Property="primitives:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="Background" Value="{DynamicResource ToolBarButtonBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ToolBarButtonBorderThemeThickness}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RadioButton">
          <Border x:Name="Background" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding primitives:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Rectangle x:Name="Border" RadiusX="{TemplateBinding primitives:ControlHelper.CornerRadius,
                                                          Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding primitives:ControlHelper.CornerRadius,
                                                          Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
              <local:ContentPresenterEx x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPointerOver}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPressed}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushPressed}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelected}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelected}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}" />
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ButtonForegroundDisabled}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPointerOver}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPressed}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedDisabled}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" BasedOn="{StaticResource DefaultTextBoxStyle}" TargetType="{x:Type TextBox}" />

  <Style x:Key="ToolBarThumbStyle" TargetType="Thumb">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Cursor" Value="SizeAll" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Border Background="Transparent" SnapsToDevicePixels="True">
            <Rectangle Margin="0,2">
              <Rectangle.Fill>
                <DrawingBrush TileMode="Tile" Viewbox="0,0,8,8" ViewboxUnits="Absolute" Viewport="0,0,4,4" ViewportUnits="Absolute">
                  <DrawingBrush.Drawing>
                    <DrawingGroup>
                      <GeometryDrawing Brush="#AAA" Geometry="M 4 4 L 4 8 L 8 8 L 8 4 z" />
                    </DrawingGroup>
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Rectangle.Fill>
            </Rectangle>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ToolBarOverflowButtonStyle" BasedOn="{StaticResource DefaultToggleButtonStyle}" TargetType="ToggleButton">
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Background" Value="{DynamicResource ToolBarButtonBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolBarButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ToolBarButtonBorderThemeThickness}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="Background" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding primitives:ControlHelper.CornerRadius}" SnapsToDevicePixels="True">
            <Grid>
              <Rectangle x:Name="Border" RadiusX="{TemplateBinding primitives:ControlHelper.CornerRadius,
                                                          Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{TemplateBinding primitives:ControlHelper.CornerRadius,
                                                          Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
              <Grid VerticalAlignment="Bottom">
                <local:FontIcon x:Name="ContentPresenter" Margin="0" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{TemplateBinding Foreground}" Glyph="&#xF2A3;" RenderTransformOrigin="0.5, 0.5">
                  <local:FontIcon.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                  </local:FontIcon.RenderTransform>
                </local:FontIcon>
              </Grid>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPointerOver}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushPointerOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundPressed}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushPressed}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Background" Property="Background" Value="{DynamicResource ToolBarButtonBackgroundSelected}" />
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelected}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ButtonForegroundDisabled}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPointerOver}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedPressed}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition Property="IsPressed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ToolBarButtonBorderBrushSelectedDisabled}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type ToolBar}" TargetType="ToolBar">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToolBar">
          <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4">
            <DockPanel>
              <ToggleButton x:Name="Popup" ClickMode="Press" DockPanel.Dock="Right" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarOverflowButtonStyle}">
                <Popup x:Name="OverflowPopup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PlacementTarget="{Binding ElementName=Popup}" PopupAnimation="Slide" StaysOpen="False">
                  <Popup.PlacementRectangle>
                    <MultiBinding>
                      <MultiBinding.Converter>
                        <primitives:PlacementRectangleConverter Margin="0,1,0,1" />
                      </MultiBinding.Converter>
                      <Binding ElementName="Popup" Path="ActualWidth" />
                      <Binding ElementName="Popup" Path="ActualHeight" />
                    </MultiBinding>
                  </Popup.PlacementRectangle>
                  <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource ControlElevationBorderBrush}" BorderThickness="1" CornerRadius="4">
                    <Border.Background>
                      <SolidColorBrush Color="{DynamicResource SystemFillColorSolidNeutralBackground}" />
                    </Border.Background>

                    <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="0" FocusVisualStyle="{x:Null}" Focusable="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200" />
                  </Border>
                </Popup>
              </ToggleButton>

              <Thumb x:Name="ToolBarThumb" Width="10" Style="{StaticResource ToolBarThumbStyle}" />
              <ToolBarPanel x:Name="PART_ToolBarPanel" Margin="0,1,2,2" IsItemsHost="True" />
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen" Value="true">
              <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="true">
              <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type ToolBarTray}" TargetType="ToolBarTray">
    <Setter Property="Background">
      <Setter.Value>
        <SolidColorBrush Color="{DynamicResource ControlFillColorDefault}" />
      </Setter.Value>
    </Setter>
    <Setter Property="Margin" Value="0" />
  </Style>

</ResourceDictionary>
