<!--  Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License. See LICENSE in the project root for license information.  -->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:ModernWpf.Controls" xmlns:primitives="clr-namespace:ModernWpf.Controls.Primitives" xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary>
      <primitives:CornerRadiusFilterConverter x:Key="TopCornerRadiusFilterConverter" Filter="Top" />
      <primitives:CornerRadiusFilterConverter x:Key="RightCornerRadiusFilterConverter" Filter="Right" />
      <primitives:CornerRadiusFilterConverter x:Key="BottomCornerRadiusFilterConverter" Filter="Bottom" />
      <primitives:CornerRadiusFilterConverter x:Key="LeftCornerRadiusFilterConverter" Filter="Left" />
    </ResourceDictionary>
  </ResourceDictionary.MergedDictionaries>

  <!--  Shared header/content  -->
  <sys:Double x:Key="ExpanderMinHeight">48</sys:Double>

  <!--  Header  -->
  <HorizontalAlignment x:Key="ExpanderHeaderHorizontalContentAlignment">Stretch</HorizontalAlignment>
  <VerticalAlignment x:Key="ExpanderHeaderVerticalContentAlignment">Center</VerticalAlignment>
  <Thickness x:Key="ExpanderHeaderHorizontalPadding">16,0,0,0</Thickness>
  <Thickness x:Key="ExpanderChevronHorizontalMargin">20,0,8,0</Thickness>
  <Thickness x:Key="ExpanderHeaderVerticalPadding">0,16,0,0</Thickness>
  <Thickness x:Key="ExpanderChevronVerticalMargin">0,20,0,8</Thickness>
  <sys:Double x:Key="ExpanderChevronButtonSize">32</sys:Double>
  <sys:Double x:Key="ExpanderChevronGlyphSize">12</sys:Double>

  <!--  Icons  -->
  <sys:String x:Key="ExpanderChevronUpGlyph">&#xF2B6;</sys:String>
  <sys:String x:Key="ExpanderChevronDownGlyph">&#xF2A3;</sys:String>
  <sys:String x:Key="ExpanderChevronChevronLeftGlyph">&#xF2AA;</sys:String>
  <sys:String x:Key="ExpanderChevronChevronRightGlyph">&#xF2B0;</sys:String>

  <!--  Content  -->
  <Thickness x:Key="ExpanderContentPadding">16</Thickness>
  <Thickness x:Key="ExpanderContentDownBorderThickness">1,0,1,1</Thickness>
  <Thickness x:Key="ExpanderContentUpBorderThickness">1,1,1,0</Thickness>
  <Thickness x:Key="ExpanderContentLeftBorderThickness">1,1,0,1</Thickness>
  <Thickness x:Key="ExpanderContentRightBorderThickness">0,1,1,1</Thickness>

  <Style x:Key="ExpanderHeaderDownStyle" TargetType="ToggleButton">
    <Setter Property="primitives:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="Padding" Value="{DynamicResource ExpanderHeaderHorizontalPadding}" />
    <Setter Property="primitives:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="ToggleButtonGrid" Width="{TemplateBinding Width}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource ExpanderHeaderBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding primitives:ControlHelper.CornerRadius}">
            <Grid SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
              <Border x:Name="ExpandCollapseChevronBorder" Grid.Column="1" Width="{DynamicResource ExpanderChevronButtonSize}" Height="{DynamicResource ExpanderChevronButtonSize}" Margin="{DynamicResource ExpanderChevronHorizontalMargin}" Background="{DynamicResource ExpanderChevronBackground}" BorderBrush="{DynamicResource ExpanderChevronBorderBrush}" BorderThickness="{DynamicResource ExpanderChevronBorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
                <local:FontIcon x:Name="ExpandCollapseChevron" Width="{DynamicResource ExpanderChevronGlyphSize}" Height="{DynamicResource ExpanderChevronGlyphSize}" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{DynamicResource ExpanderChevronForeground}" Glyph="{DynamicResource ExpanderChevronDownGlyph}" RenderTransformOrigin="0.5, 0.5" SnapsToDevicePixels="false">
                  <local:FontIcon.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                  </local:FontIcon.RenderTransform>
                </local:FontIcon>
              </Border>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPointerOver}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPointerOverForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPointerOverBackground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPressed}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPressedForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPressedBackground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderHeaderUpStyle" TargetType="ToggleButton">
    <Setter Property="primitives:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="Padding" Value="{DynamicResource ExpanderHeaderHorizontalPadding}" />
    <Setter Property="primitives:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="ToggleButtonGrid" Width="{TemplateBinding Width}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource ExpanderHeaderBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding primitives:ControlHelper.CornerRadius}">
            <Grid SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
              <Border x:Name="ExpandCollapseChevronBorder" Grid.Column="1" Width="{DynamicResource ExpanderChevronButtonSize}" Height="{DynamicResource ExpanderChevronButtonSize}" Margin="{DynamicResource ExpanderChevronHorizontalMargin}" Background="{DynamicResource ExpanderChevronBackground}" BorderBrush="{DynamicResource ExpanderChevronBorderBrush}" BorderThickness="{DynamicResource ExpanderChevronBorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
                <local:FontIcon x:Name="ExpandCollapseChevron" Width="{DynamicResource ExpanderChevronGlyphSize}" Height="{DynamicResource ExpanderChevronGlyphSize}" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{DynamicResource ExpanderChevronForeground}" Glyph="{DynamicResource ExpanderChevronUpGlyph}" RenderTransformOrigin="0.5, 0.5" SnapsToDevicePixels="false">
                  <local:FontIcon.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                  </local:FontIcon.RenderTransform>
                </local:FontIcon>
              </Border>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPointerOver}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPointerOverForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPointerOverBackground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPressed}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPressedForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPressedBackground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderHeaderLeftStyle" TargetType="ToggleButton">
    <Setter Property="primitives:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="Padding" Value="{DynamicResource ExpanderHeaderVerticalPadding}" />
    <Setter Property="primitives:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="ToggleButtonGrid" Width="{TemplateBinding Width}" MinWidth="{TemplateBinding MinHeight}" MinHeight="{TemplateBinding MinWidth}" MaxHeight="{TemplateBinding MaxWidth}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource ExpanderHeaderBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding primitives:ControlHelper.CornerRadius}">
            <Grid SnapsToDevicePixels="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="True">
                <local:ContentPresenterEx.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </local:ContentPresenterEx.LayoutTransform>
              </local:ContentPresenterEx>
              <Border x:Name="ExpandCollapseChevronBorder" Grid.Row="1" Width="{DynamicResource ExpanderChevronButtonSize}" Height="{DynamicResource ExpanderChevronButtonSize}" Margin="{DynamicResource ExpanderChevronVerticalMargin}" Background="{DynamicResource ExpanderChevronBackground}" BorderBrush="{DynamicResource ExpanderChevronBorderBrush}" BorderThickness="{DynamicResource ExpanderChevronBorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
                <local:FontIcon x:Name="ExpandCollapseChevron" Width="{DynamicResource ExpanderChevronGlyphSize}" Height="{DynamicResource ExpanderChevronGlyphSize}" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{DynamicResource ExpanderChevronForeground}" Glyph="{DynamicResource ExpanderChevronChevronLeftGlyph}" RenderTransformOrigin="0.5, 0.5" SnapsToDevicePixels="false">
                  <local:FontIcon.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                  </local:FontIcon.RenderTransform>
                </local:FontIcon>
              </Border>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPointerOver}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPointerOverForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPointerOverBackground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPressed}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPressedForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPressedBackground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderRightHeaderRightStyle" TargetType="ToggleButton">
    <Setter Property="primitives:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
    <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="Padding" Value="{DynamicResource ExpanderHeaderVerticalPadding}" />
    <Setter Property="primitives:FocusVisualHelper.FocusVisualMargin" Value="-3" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="ToggleButtonGrid" Width="{TemplateBinding Width}" MinWidth="{TemplateBinding MinHeight}" MinHeight="{TemplateBinding MinWidth}" MaxHeight="{TemplateBinding MaxWidth}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource ExpanderHeaderBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding primitives:ControlHelper.CornerRadius}">
            <Grid SnapsToDevicePixels="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <local:ContentPresenterEx x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" RecognizesAccessKey="True" SnapsToDevicePixels="True">
                <local:ContentPresenterEx.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="-90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </local:ContentPresenterEx.LayoutTransform>
              </local:ContentPresenterEx>
              <Border x:Name="ExpandCollapseChevronBorder" Grid.Row="1" Width="{DynamicResource ExpanderChevronButtonSize}" Height="{DynamicResource ExpanderChevronButtonSize}" Margin="{DynamicResource ExpanderChevronVerticalMargin}" Background="{DynamicResource ExpanderChevronBackground}" BorderBrush="{DynamicResource ExpanderChevronBorderBrush}" BorderThickness="{DynamicResource ExpanderChevronBorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}">
                <local:FontIcon x:Name="ExpandCollapseChevron" Width="{DynamicResource ExpanderChevronGlyphSize}" Height="{DynamicResource ExpanderChevronGlyphSize}" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource FluentSystemIcons}" FontSize="12" Foreground="{DynamicResource ExpanderChevronForeground}" Glyph="{DynamicResource ExpanderChevronChevronRightGlyph}" RenderTransformOrigin="0.5, 0.5" SnapsToDevicePixels="false">
                  <local:FontIcon.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                  </local:FontIcon.RenderTransform>
                </local:FontIcon>
              </Border>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.2" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPointerOver}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPointerOverForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPointerOverBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPointerOverBackground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderForegroundPressed}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderChevronPressedForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderChevronBorderPressedBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronPressedBackground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ToggleButtonGrid" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevron" Property="Foreground" Value="{DynamicResource ExpanderHeaderDisabledForeground}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="BorderBrush" Value="{DynamicResource ExpanderHeaderDisabledBorderBrush}" />
              <Setter TargetName="ExpandCollapseChevronBorder" Property="Background" Value="{DynamicResource ExpanderChevronBackground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="DefaultExpanderStyle" TargetType="Expander">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Background" Value="{DynamicResource ExpanderContentBackground}" />
    <Setter Property="MinWidth" Value="{DynamicResource FlyoutThemeMinWidth}" />
    <Setter Property="MinHeight" Value="{DynamicResource ExpanderMinHeight}" />
    <Setter Property="BorderThickness" Value="{DynamicResource ExpanderContentDownBorderThickness}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ExpanderContentBorderBrush}" />
    <Setter Property="Padding" Value="{DynamicResource ExpanderContentPadding}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="primitives:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Expander">
          <DockPanel MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}">
            <ToggleButton x:Name="ExpanderHeader" MinHeight="{TemplateBinding MinHeight}" Padding="{DynamicResource ExpanderHeaderHorizontalPadding}" HorizontalAlignment="Stretch" HorizontalContentAlignment="{DynamicResource ExpanderHeaderHorizontalContentAlignment}" VerticalContentAlignment="{DynamicResource ExpanderHeaderVerticalContentAlignment}" primitives:ControlHelper.CornerRadius="{TemplateBinding primitives:ControlHelper.CornerRadius}" AutomationProperties.AutomationId="ExpanderToggleButton" Background="{DynamicResource ExpanderHeaderBackground}" BorderBrush="{DynamicResource ExpanderHeaderBorderBrush}" BorderThickness="{DynamicResource ExpanderHeaderBorderThickness}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding IsEnabled}" Style="{DynamicResource ExpanderHeaderDownStyle}" Tag="{TemplateBinding primitives:ControlHelper.CornerRadius}" />
            <!--  The clip is a composition clip applied in code  -->
            <Border x:Name="ExpanderContentClip" DockPanel.Dock="Bottom">
              <Border x:Name="ExpanderContent" MinHeight="{TemplateBinding MinHeight}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{StaticResource ExpanderContentDownBorderThickness}" CornerRadius="{TemplateBinding primitives:ControlHelper.CornerRadius,
                                                               Converter={StaticResource BottomCornerRadiusFilterConverter}}" Visibility="Collapsed">
                <ContentPresenter x:Name="ExpandSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Focusable="false" />
              </Border>
            </Border>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
              <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="ExpanderHeader" Property="Style" Value="{DynamicResource ExpanderRightHeaderRightStyle}" />
              <Setter TargetName="ExpanderHeader" Property="Padding" Value="{DynamicResource ExpanderHeaderVerticalPadding}" />
              <Setter TargetName="ExpanderHeader" Property="VerticalContentAlignment" Value="Stretch" />
              <Setter TargetName="ExpanderHeader" Property="HorizontalContentAlignment" Value="Center" />
              <Setter TargetName="ExpanderContent" Property="BorderThickness" Value="{DynamicResource ExpanderContentRightBorderThickness}" />
              <Setter TargetName="ExpanderContent" Property="CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource RightCornerRadiusFilterConverter}}" />
              <Setter TargetName="ExpanderContentClip" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="ExpanderHeader" Property="DockPanel.Dock" Value="Left" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter TargetName="ExpanderHeader" Property="Style" Value="{DynamicResource ExpanderHeaderUpStyle}" />
              <Setter TargetName="ExpanderContent" Property="BorderThickness" Value="{DynamicResource ExpanderContentUpBorderThickness}" />
              <Setter TargetName="ExpanderContent" Property="CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
              <Setter TargetName="ExpanderContentClip" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="ExpanderHeader" Property="DockPanel.Dock" Value="Bottom" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter TargetName="ExpanderHeader" Property="Style" Value="{DynamicResource ExpanderHeaderLeftStyle}" />
              <Setter TargetName="ExpanderHeader" Property="Padding" Value="{DynamicResource ExpanderHeaderVerticalPadding}" />
              <Setter TargetName="ExpanderHeader" Property="VerticalContentAlignment" Value="Stretch" />
              <Setter TargetName="ExpanderHeader" Property="HorizontalContentAlignment" Value="Center" />
              <Setter TargetName="ExpanderContent" Property="BorderThickness" Value="{DynamicResource ExpanderContentLeftBorderThickness}" />
              <Setter TargetName="ExpanderContent" Property="CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource LeftCornerRadiusFilterConverter}}" />
              <Setter TargetName="ExpanderContentClip" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="ExpanderHeader" Property="DockPanel.Dock" Value="Right" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}" />
            </Trigger>

            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsExpanded" Value="true" />
                <Condition Property="ExpandDirection" Value="Down" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="ExpanderHeader" Property="primitives:ControlHelper.CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsExpanded" Value="true" />
                <Condition Property="ExpandDirection" Value="Right" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="ExpanderHeader" Property="primitives:ControlHelper.CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource LeftCornerRadiusFilterConverter}}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsExpanded" Value="true" />
                <Condition Property="ExpandDirection" Value="Up" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="ExpanderHeader" Property="primitives:ControlHelper.CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsExpanded" Value="true" />
                <Condition Property="ExpandDirection" Value="Left" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="ExpanderHeader" Property="primitives:ControlHelper.CornerRadius" Value="{Binding Tag, ElementName=ExpanderHeader, Converter={StaticResource RightCornerRadiusFilterConverter}}" />
              </MultiTrigger.Setters>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style BasedOn="{StaticResource DefaultExpanderStyle}" TargetType="Expander" />

</ResourceDictionary>
